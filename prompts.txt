## 技巧
- 直接@文件，文件内容更聚焦和精准


## Iteration 5
模型：deepseek-v3、qwen3-32b

### 0、模板准备
AI协作，生成了：
docs/templates/architecture-tmpl.md
docs/templates/prd-tmpl.md


### 1、文档生成
USER>>> 你是一个 C 语言开发者，根据以下项目需求和模板，生成完整的 PRD 文档和 Architecture 文档。

【任务说明】
- 仅生成文档，不编写代码
- 使用 PRD 模板和 Architecture 模板
- 输出格式为 Markdown
- 不使用任何测试框架或代码实现
- 使用make构建工具

项目需求：
我需要一个 add 函数，输入两个整数 a 和 b，返回它们的和。支持负数、零、正数。不考虑溢出。需要生成单元测试。

请根据 PRD 模板 生成PRD文档： /docs/prd.md
请根据 Architecture 模板 生成架构文档： /docs/architecture.md

PRD 模板：
@/docs/templates/prd-tmpl.md

Architecture 模板：
@/docs/templates/architecture-tmpl.md


【偏差数据】
无

### 2、代码生成 + 自动化迭代
USER>>> 你是一个 C 语言开发者，根据以下 PRD 和 Architecture 文档，生成 add 函数的实现代码和单元测试代码。

【规范】
- 先写测试用例，再写功能实现
- 使用 assert 作为测试框架
- 路径结构为：src/ 与 tests/
- 不使用 catch2、CUnit 等其他框架
- 生成 Makefile，支持 `make test` 执行测试

【头文件包含规范】
所有模块头文件应放在 `include/` 目录下。在源文件中，使用如下方式包含头文件：
```c
#include "xxx.h"
```

PRD 文档：
@/docs/prd.md 
架构文档：
@/docs/architecture.md 


【偏差数据】
无

### 3、偏差分析与优化
- [x] 1、构建工具变成了Cmake
- [x] 1、没有先创建接口头文件
- [x] 2、#include "../include/add.h"

### 4、验证入库/回滚
已验证。

【测试报告】
make test通过。
无偏差。
可提交。


## change to cmake build

### 0、模板准备
无

### 1、文档生成
无

### 2、代码生成 + 自动化迭代
USER>>> 你是一个 C 语言开发者，请把当前 make 构建项目修改为 cmake 工程

【需求】
- cmake项目名为 funcagent
- src生成静态库，库名 funcagent
- test生成可执行文件
- 同时保留 make 构建

【规范】
- cmake版本最小版本3.20


【任务拆分】
- 先分析当前 make 构建，了解 源码，头文件，库目录，依赖库，构建目标等信息
- 创建顶层 CMakeLists.txt
- 创建 src/CMakeLists.txt
- 创建 test/CMakeLists.txt
- cmake构建 并测试


### 3、偏差分析与优化
无

### 4、验证入库/回滚
【测试报告】
验证通过。

USER>>> 本次修改变更 更新到 CHANGELOG.md

【要求】
当前版本始终保持 0.1.x
最新修改保持再顶部

格式：
# Func Agent Changelog

### [版本] - 日期
- 一句话简短描述当前任务
