# AI编程提示词记录

> 本文档记录了 每轮迭代 的完整开发流程的所有AI提示词，可用于复现整个开发过程。

## 技巧
- 直接@文件，文件内容更聚焦和精准

## 目标
一句话需求，如：我需要一个支持整数和浮点数加法运算的算子库，支持负数、零、正数，生成单元测试，使用CMake构建

## 方向
- 提升“一句话需求”的解析和理解能力 (方向一)：这是实现终极目标的关键一步，让AI能够从更宏观的指令开始工作。
- 增强代码生成的鲁棒性和通用性 (方向二)：逐步增加功能复杂度，验证AI在更多实际场景下的能力。


## Base - Iteration 7：提示词函数
测试模型：
- [x] deepseek-v3
- [ ] qwen3-32b
- [ ] qwen2.5-coder-32b

核心理念： 
一切从“任务”开始。项目被分解为多个任务文件，每个任务文件包含其自身的 TODO 列表。
AI 将根据这些任务文件来生成文档、代码，并进行验证。


### 0、模板准备
AI协作，生成如下模型：
docs/templates/task-tmpl.md
docs/templates/architecture-tmpl.md
docs/templates/prd-tmpl.md


### 1、root任务文档生成

USER>>> 你是一个专业的C语言开发者和软件项目经理。

我需要你根据以下项目需求和提供的模板，启动一个新的项目开发流程。

【核心项目需求】
我需要一个C语言的算子库，**库名为 `add`**，它提供统一的API接口，当前阶段仅支持 add 算子（加法运算）。
add 算子需要支持整数和浮点数的加法，函数名为 `addi` 和 `addf`。
所有算子函数都需要有单元测试。
项目构建工具使用 Make。
项目需要有一个README说明如何使用和构建。

【任务】
请你根据上述核心项目需求和提供的模板，生成以下初始文档：
1. **PRD 文档：** `/docs/prd.md` (使用 prd-tmpl.md)
2. **架构文档：** `/docs/architecture.md` (使用 architecture-tmpl.md)
3. **项目总任务文件：** `/docs/tasks/00-root-task.md` (使用 task-tmpl.md)

【模板文件路径】
@/docs/templates/prd-tmpl.md
@/docs/templates/architecture-tmpl.md
@/docs/cpp-project-standards.md
@/docs/templates/task-tmpl.md

【生成规则】
- 在 `00-root-task.md` 的“任务 TODO List”中，请包含：
    - 生成 PRD 文档的 TODO 项。
    - 生成架构文档的 TODO 项。
    - **根据【核心项目需求】中描述的主要功能，明确列出其作为主要的 TODO 项。此项应涵盖功能的完整实现和验证（包括单元测试），无需在 `00-root-task.md` 中进一步分解，其具体分解将严格遵循测试驱动开发（TDD）流程并在独立的子任务文件中进行。**
    - 列出其他独立的工作项（如：**配置 Make 构建系统**，编写README）。
    - **不要包含“更新本任务文件中的自动化测试报告”这个 TODO 项。**
- **确保 `00-root-task.md` 文档中包含模板原有的 `### 人工审查意见 (可选)` 章节，且该章节保持空白（`状态：`和`详细描述：`）。**
- `00-root-task.md` 文档不需要 `### 自动化测试报告 (可选)` 章节
- 在 `00-root-task.md` 的“产物交付件”章节中，请根据**核心项目需求**，列出**整个项目完成后的所有最终产物**。
- 在生成 PRD 和架构文档时，请严格根据【核心项目需求】填充内容，并**严格遵循 `@/docs/cpp-project-standards.md` 中定义的项目规范**。
- **特别地，在生成架构文档 (`/docs/architecture.md`) 时，请在“模块划分”章节中，根据核心项目需求中对算子/模块功能的描述以及其包含的**主要函数**，明确指出其对应的源代码文件（例如 `src/[函数名].cpp` 或 `src/[逻辑组件名].cpp`）以及它们的功能，遵循**每个主要函数或逻辑子组件对应一个独立的源文件**的原则。**
- 仅生成文档，不编写代码。


---
【偏差速记】
无

### 2、子任务生成
USE>>> 你是一个专业的C语言开发者。

请根据以下PRD、架构文档以及指定的父任务TODO项，为“实现 add 算子功能”创建一个独立的子任务文件。

【父任务及待分解的TODO项】
父任务文件：@/docs/tasks/00-root-task.md
待分解的TODO项：- [ ] 实现 add 算子功能 (此项代表“实现 add 算子功能模块”，需要进一步分解)

【参考文档】
PRD 文档：@/docs/prd.md
架构文档：@/docs/architecture.md
@/docs/cpp-project-standards.md

【任务】
请生成以下**子任务文件** ：`/docs/tasks/01-feature-add-task.md` (使用 task-tmpl.md)

【生成规则】
- 在**子任务文件**的“任务 TODO List”中，请将**父任务中待分解的TODO项所代表的功能**分解为**最精简、最少但完整的逻辑步骤**。
- **关于 TODO 粒度的重要说明：**
    - **目标是生成 4 到 6 个 TODO 项。**
    - 每个 TODO 项应代表一个清晰的、可执行的逻辑单元。它不应过于抽象（导致 AI 无法直接执行），也不应过于细碎（导致列表冗余）。
    - 对于 AI 可以**自主完成其内部子步骤**的逻辑单元，即使它包含多个原子操作，也应将其**聚合为一个单一的 TODO 项**，无需在 TODO 列表内体现其内部细节（即：**不允许出现缩进的子 TODO**）。
    - 只有当一个步骤复杂到需要**人类介入其内部的进一步分解或审查**时，才考虑将其提升为**新的独立子任务**。
- **严格遵循测试驱动开发（TDD）流程。因此，TODO 项的顺序应是：先编写测试用例，再实现函数逻辑，最后进行必要的 Make 文件更新。**
- TODO 项应根据**参考文档**（特别是PRD和架构文档）中描述的功能细节，涵盖从定义函数原型、编写单元测试、实现函数逻辑到更新构建配置的完整流程。
- 在“父任务”部分，请引用 `/docs/tasks/00-root-task.md`。
- 确保 **子任务文件** 中包含模板原有的 `### 自动化测试报告 (可选)` 章节
- 仅生成文档，不编写代码。


---
【偏差速记】
无

### 3、代码生成（AI自动迭代）
USER>>> 你是一个专业的C语言开发者。

请根据以下参考文档以及指定的子任务文件，生成实现代码和单元测试代码。

【当前执行的任务文件】
@/docs/tasks/01-feature-add-task.md

【参考文档】
PRD 文档：@/docs/prd.md
架构文档：@/docs/architecture.md
@/docs/cpp-project-standards.md

【规范】
- 严格遵循 【当前执行的任务文件】 中“任务 TODO List”列出的原子步骤进行代码生成。
- 严格遵循测试驱动开发（TDD）流程：先编写测试用例，再实现函数逻辑。
- 严格遵循 `@/docs/cpp-project-standards.md` 中定义的所有编码、文件组织、测试和构建规范。

【执行与反馈】
- 在生成代码和测试后，请你自行执行自动化测试（模拟运行 make test）。
- 根据测试结果，请直接更新 【当前执行的任务文件】 文件中的“自动化测试报告”区域。
    - 在“状态”和“详细信息”字段中，填充测试的通过/失败状态和具体的输出摘要。
- 【非常重要】请务必将 【当前执行的任务文件】 中所有已完成的 TODO 项标记为 [x]。


---
【偏差速记】
无


### 4、人工审查与验收

【人工审查】
- [x] 检查程序功能
- [x] 更新子任务文档
- [x] 更新root任务文档
- [x] 更新deviations文档


【AI更新CHANGELOG.md】
USER>>> 请根据项目总任务文件中的最新完成情况，并结合我提供的【本次发布要点】，更新项目的 CHANGELOG.md。

【总任务文件】
@/docs/tasks/00-root-task.md

【本次发布要点】
// 在这里写下本次发布的核心功能、重要修复或对外可见的变更摘要。
// 例如：
// - 实现了全新的 add 算子，支持整数和浮点数加法。
// - 优化了项目构建流程。
// - 修复了文档中几处描述不清的问题。

【要求】
- 当前版本始终保持 0.1.x
- 最新修改保持在顶部。
- **结合【本次发布要点】和 `00-root-task.md` 中最新的已完成 TODO 项，生成一个简洁、对外友好的更新描述。不要直接复制 TODO 描述。**
- 日期使用当前日期（例如：2025-07-26）。

格式：
```markdown
# Func Agent Changelog

### [版本] - 日期
- 一句话简短描述本次更新的亮点。
- (可选) 更多亮点或修复。
```


## Enhancement 1 - [Build]change to cmake

### 0、模板准备
@/docs/func/make-to-cmake-migration.md

### 1、root任务文档生成
无

### 2、子任务生成
无

### 3、代码生成（AI自动迭代）
USER>>> 你是一个名为 FuncAgent 的自动化任务执行者。你唯一的职责是接收任务，并严格按照任务文档中的 `任务 TODO List` 顺序执行每一步。

---
### Func 工具箱
这是一个包含所有可用 Func 的列表。在执行任务时，请使用 `reda_file` 工具来读取 Func 的文件内容，并按照 `instructions` 字段中的指令列表，逐一执行。
**按需读取：只有在`TOOD List`中用到某一 Func 时才读取对应文件内容。**

【工具调用规范】
1. 所有 Func 工具都是本地操作，读取本地文件并执行指令
2. 从 `Func工具列表` 中，根据 Func 名称查找对应的文件路径。
3. 加载该 Func 文档，并解析其 YAML 结构。文档加载机制：按需加载。
4. 严格按照 Func 工具文档中 `instructions` 字段中的指令列表，逐一执行。

【Func工具列表】
- **read-project**: `docs/func/read-project.yaml`
- **read-makefile**: `docs/func/read-makefile.yaml`
- **generate-cmakelists**: `docs/func/generate-cmakelists.yaml`
- **run-cmake-target**: `docs/func/run-cmake-target.yaml`
- ... (可以继续添加其他 Func)

---
### 你的行为准则
- **无对话，即刻执行**：你不能进行任何任务分析或总结。你的输出必须是**更新后的完整任务文档**，而不是对话或解释。
- **严格遵循指令**：在执行每个 Func 时，必须严格按照该 Func 的 `instructions` 字段中的每一条指令执行，不得省略任何步骤。
- **状态维护与文件管理**：你必须严格遵循 Func 文档的 `instructions` 指导。将中间数据更新到 `Runtime Context`，将临时文件存储在 `_tmp_workspace/{xyz_name}/` 目录中，并将最终报告写入 `Task` 文档的指定报告区域。
- **工具调用规范**：当 `TODO List` 中出现“调用 [Func 名称]”时， 根据 `Func 工具箱` 中的 [Func 名称]执行
- **执行顺序严格性**：严格按照 `TODO List` 中的顺序执行，不得跳过或合并任何步骤。
- **循环执行规范**：每完成一个任务后，立即更新该条目的状态为 `[x]`，然后开始下一个任务的执行。
- **完整执行保证**：`TODO List` 中的每一项任务都可能包含一个或多个 Func 调用。你必须识别并完整地执行所有 Func 调用，才能将该项任务标记为已完成。
- **错误处理机制**：如果 Func 调用失败，请立即停止执行，并在 `Runtime Context` 中输出详细的错误报告。


---
### 用户输入和任务文档
@/docs/func/make-to-cmake-migration.md --project_name func-add --cmake_min 2.20


### 4、人工审查与验收

【人工审查】
- [x] 检查程序功能
- [x] 更新子任务文档
- [x] 更新root任务文档
- [x] 更新deviations文档


【AI更新CHANGELOG.md】
USER>>> 请根据项目总任务文件中的最新完成情况，并结合我提供的【本次发布要点】，更新项目的 CHANGELOG.md。

【总任务文件】
@/docs/tasks/00-root-task.md

【本次发布要点】
// 在这里写下本次发布的核心功能、重要修复或对外可见的变更摘要。
// 例如：
// - 实现了全新的 add 算子，支持整数和浮点数加法。
// - 优化了项目构建流程。
// - 修复了文档中几处描述不清的问题。

【要求】
- 当前版本始终保持 0.1.x
- 最新修改保持在顶部。
- **结合【本次发布要点】和 `00-root-task.md` 中最新的已完成 TODO 项，生成一个简洁、对外友好的更新描述。不要直接复制 TODO 描述。**
- 日期使用当前日期（例如：2025-07-26）。

格式：
```markdown
# Func Agent Changelog

### [版本] - 日期
- 一句话简短描述本次更新的亮点。
- (可选) 更多亮点或修复。
```
