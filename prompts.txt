# AI编程提示词记录

> 本文档记录了 每轮迭代 的完整开发流程的所有AI提示词，可用于复现整个开发过程。

## 技巧
- 直接@文件，文件内容更聚焦和精准

## 目标
一句话需求，如：我需要一个支持整数和浮点数加法运算的算子库，支持负数、零、正数，生成单元测试，使用CMake构建

## 方向
- 提升“一句话需求”的解析和理解能力 (方向一)：这是实现终极目标的关键一步，让AI能够从更宏观的指令开始工作。
- 增强代码生成的鲁棒性和通用性 (方向二)：逐步增加功能复杂度，验证AI在更多实际场景下的能力。


## Base - Iteration 6：任务驱动的 AI 编程流程
测试模型：
- deepseek-v3
- qwen3-32b
- qwen2.5-coder-32b

核心理念： 
一切从“任务”开始。项目被分解为多个任务文件，每个任务文件包含其自身的 TODO 列表。
AI 将根据这些任务文件来生成文档、代码，并进行验证。


### 0、模板准备
AI协作，生成如下模型：
docs/templates/task-tmpl.md
docs/templates/architecture-tmpl.md
docs/templates/prd-tmpl.md


### 1、root任务文档生成
USER>>> 你是一个专业的C语言开发者和软件项目经理。

我需要你根据以下项目需求和提供的模板，启动一个新的项目开发流程。

【核心项目需求】
我需要一个C语言的算子库。
当前阶段，该算子库仅支持 add 算子（加法运算）。
add 算子需要支持整数和浮点数的加法。
这个库需要提供统一的API接口。
所有算子函数都需要有单元测试。
**项目构建工具使用 Make。**
源代码和头文件应按模块组织，并生成静态库。
项目需要有一个README说明如何使用和构建。

【任务】
请你根据上述核心项目需求和提供的模板，生成以下初始文档：
1. **项目总任务文件：** `/docs/tasks/00-root-task.md` (使用 task-tmpl.md)
2. **PRD 文档：** `/docs/prd.md` (使用 prd-tmpl.md)
3. **架构文档：** `/docs/architecture.md` (使用 architecture-tmpl.md)

【模板文件路径】
@/docs/templates/task-tmpl.md
@/docs/templates/prd-tmpl.md
@/docs/templates/architecture-tmpl.md

【生成规则】
- 在 `00-root-task.md` 的“任务 TODO List”中，请包含：
    - 生成 PRD 文档的 TODO 项。
    - 生成架构文档的 TODO 项。
    - 明确列出“实现 add 算子功能”作为主要的 TODO 项（无需额外标注是否需要分解。AI需要自行判断）。
    - 列出其他独立的工作项（如：**配置 Make 构建系统**，编写README）。
- 在生成 PRD 和架构文档时，请严格根据“核心项目需求”中关于“算子库”、“add 算子”以及**“Make 构建工具”**的描述填充内容。
- 仅生成文档，不编写代码。


---
【偏差速记】
- [x] 任务 TODO List的状态何时更新？ -- 模板TODO增加更新任务
- [ ] (可选) 章节如何处理？
- [X] root任务名为 00-root-task.md

### 2、子任务生成
USE>>> 你是一个专业的C语言开发者。

请根据以下核心项目需求、PRD、架构文档以及指定的父任务TODO项，为“实现 add 算子功能”创建一个独立的子任务文件。

【核心项目需求】
我需要一个C语言的算子库。
当前阶段，该算子库仅支持 add 算子（加法运算）。
add 算子需要支持整数和浮点数的加法。
这个库需要提供统一的API接口。
所有算子函数都需要有单元测试。
项目构建工具使用 Make。
源代码和头文件应按模块组织，并生成静态库。
项目需要有一个README说明如何使用和构建。

【父任务及待分解的TODO项】
父任务文件：@/docs/tasks/00-root-task.md
待分解的TODO项：- [ ] 实现 add 算子功能 (此项代表“实现 add 算子功能模块”，需要进一步分解)

【参考文档】
PRD 文档：@/docs/prd.md
架构文档：@/docs/architecture.md

【任务】
请生成以下子任务文件：`/docs/tasks/01-feature-add-task.md` (使用 task-tmpl.md)

【生成规则】
- 在 `01-feature-add-task.md` 的“任务 TODO List”中，请将“实现 add 算子功能”分解为**最精简、最少但完整的逻辑步骤**。
- **关于 TODO 粒度的重要说明：**
    - **目标是生成 4 到 6 个 TODO 项。**
    - 每个 TODO 项应代表一个清晰的、可执行的逻辑单元。它不应过于抽象（导致 AI 无法直接执行），也不应过于细碎（导致列表冗余）。
    - 对于 AI 可以**自主完成其内部子步骤**的逻辑单元，即使它包含多个原子操作，也应将其**聚合为一个单一的 TODO 项**，无需在 TODO 列表内体现其内部细节（即：**不允许出现缩进的子 TODO**）。
    - 只有当一个步骤复杂到需要**人类介入其内部的进一步分解或审查**时，才考虑将其提升为**新的独立子任务**。
- **严格遵循测试驱动开发（TDD）流程。因此，TODO 项的顺序应是：先编写测试用例，再实现函数逻辑，最后进行必要的 Make 文件更新。**
- TODO 项应包括（请根据上述精简和粒度原则重新评估并列出）：
    - 定义 add 算子函数原型
    - 编写 add 算子的单元测试
    - 实现 add 算子函数逻辑
    - 更新 Make 构建配置
- 在“父任务”部分，请引用 `/docs/tasks/00-root-task.md`。
- 仅生成文档，不编写代码。

【模板文件路径】
@/docs/templates/task-tmpl.md


---
【偏差速记】
- [x] 子任务放到同级目录，扁平化
- [x] 减少TODO列表数。尽量步出现缩进的子TODO
- [ ]把TODO项看成一个原子TODO，或内置TODO -- Iteration 7 增加内置任务库


### 3、代码生成（AI自动迭代）
USER>>> 你是一个专业的C语言开发者。

请根据以下核心项目需求、PRD、架构文档以及指定的子任务文件，生成实现代码和单元测试代码。

【核心项目需求】
我需要一个C语言的算子库。
当前阶段，该算子库仅支持 add 算子（加法运算）。
add 算子需要支持整数和浮点数的加法。
这个库需要提供统一的API接口。
所有算子函数都需要有单元测试。
项目构建工具使用 Make。
源代码和头文件应按模块组织，并生成静态库。
项目需要有一个README说明如何使用和构建。

【当前执行的任务文件】
@/docs/tasks/01-feature-add-task.md

【参考文档】
PRD 文档：@/docs/prd.md
架构文档：@/docs/architecture.md

【规范】
- 严格遵循 `01-feature-add-task.md` 中“任务 TODO List”列出的原子步骤进行代码生成。
- 先写测试用例，再写功能实现。
- 使用 assert 作为测试框架。
- 路径结构为：src/operators/ 用于源文件，src/include/operators/ 用于头文件，tests/operators/ 用于测试文件。
- 不使用 catch2、CUnit 等其他框架。
- 生成 Makefile 文件，支持 `make all` 编译库和 `make test` 执行测试。

【头文件包含规范 - 重点修正】
所有模块头文件都将放置在 `src/include/` 目录下。
在任何源文件（`.c` 文件）中包含这些头文件时，请**直接使用相对于 `src/include/` 的逻辑路径**。
例如，如果 `add.h` 在 `src/include/operators/` 目录下，那么在 `.c` 文件中应写为：
```c
#include "operators/add.h"
```
**请勿使用相对路径（如 ../../src/include/operators/add.h）。**

【执行与反馈 - 重点修正】
- **在生成代码和测试后，请你自行执行自动化测试（模拟运行 make test）。**
- **根据测试结果，请直接更新 @/docs/tasks/01-feature-add-task.md 文件中的“验证与反馈”区域。**
  - 在“自动化测试报告”的“状态”和“详细信息”字段中，填充测试的通过/失败状态和具体的输出摘要。
- **【非常重要】请务必将 01-feature-add-task.md 中所有已完成的 TODO 项标记为 [x]。**


---
【偏差速记】
- [x] 头文件包含： #include "../../src/include/operators/add.h" -- 增加规范
- [x] 未更新文档：已完成的 TODO 项未标记 -- 修改 task-tmpl.md,增加更新TODO项


### 4、人工审查与验收

【人工审查】
- 检查程序功能
- 更新子任务文档
- 更新root任务文档
- 更新deviations文档


【AI更新CHANGELOG.md】
USER>>> 请根据项目总任务文件中的最新完成情况，并结合我提供的【本次发布要点】，更新项目的 CHANGELOG.md。

【总任务文件】
@/docs/tasks/00-root-task.md

【本次发布要点】
// 在这里写下本次发布的核心功能、重要修复或对外可见的变更摘要。
// 例如：
// - 实现了全新的 add 算子，支持整数和浮点数加法。
// - 优化了项目构建流程。
// - 修复了文档中几处描述不清的问题。

【要求】
- 当前版本始终保持 0.1.x
- 最新修改保持在顶部。
- **结合【本次发布要点】和 `00-root-task.md` 中最新的已完成 TODO 项，生成一个简洁、对外友好的更新描述。不要直接复制 TODO 描述。**
- 日期使用当前日期（例如：2025-07-26）。

格式：
```markdown
# Func Agent Changelog

### [版本] - 日期
- 一句话简短描述本次更新的亮点。
- (可选) 更多亮点或修复。
```


## Enhancement 1 - [Build]change to cmake

### 0、模板准备
无

### 1、文档生成
无

### 2、代码生成 + 自动化迭代
USER>>> 你是一个 C 语言开发者，请把当前 make 构建项目修改为 cmake 工程

【需求】
- cmake项目名为 funcagent
- src生成静态库，库名 funcagent
- test生成可执行文件
- 同时保留 make 构建

【规范】
- cmake版本最小版本3.20


【任务拆分】
- 先分析当前 make 构建，了解 源码，头文件，库目录，依赖库，构建目标等信息
- 创建顶层 CMakeLists.txt
- 创建 src/CMakeLists.txt
- 创建 test/CMakeLists.txt
- cmake构建 并测试


### 3、偏差分析与优化
无

### 4、验证入库/回滚
【测试报告】
验证通过。

USER>>> 本次修改变更 更新到 CHANGELOG.md

【要求】
当前版本始终保持 0.1.x
最新修改保持再顶部

格式：
```markdown
# Func Agent Changelog

### [版本] - 日期
- 一句话简短描述当前任务
```

## Enhancement 2 - [Feature] add support float

