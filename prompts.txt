# AI编程提示词记录

> 本文档记录了 每轮迭代 的完整开发流程的所有AI提示词，可用于复现整个开发过程。

## 技巧
- 直接@文件，文件内容更聚焦和精准

## 目标
一句话需求，如：我需要一个支持整数和浮点数加法的函数，支持负数、零、正数，生成单元测试，使用CMake构建

## 方向
- 提升“一句话需求”的解析和理解能力 (方向一)：这是实现终极目标的关键一步，让AI能够从更宏观的指令开始工作。
- 增强代码生成的鲁棒性和通用性 (方向二)：逐步增加功能复杂度，验证AI在更多实际场景下的能力。


## Base - Iteration 6：任务驱动的 AI 编程流程
测试模型：
- deepseek-v3
- qwen3-32b
- qwen2.5-coder-32b

核心理念： 
一切从“任务”开始。项目被分解为多个任务文件，每个任务文件包含其自身的 TODO 列表。
AI 将根据这些任务文件来生成文档、代码，并进行验证。


### 0、模板准备
AI协作，生成如下模型：
docs/templates/task-tmpl.md
docs/templates/architecture-tmpl.md
docs/templates/prd-tmpl.md


### 1、文档生成
USER>>> 你是一个专业的C语言开发者和软件项目经理。

我需要你根据以下项目需求和提供的模板，启动一个新的项目开发流程。

【核心项目需求】
我需要一个 add 函数，输入两个整数 a 和 b，返回它们的和。支持负数、零、正数。不考虑溢出。需要生成单元测试。

【任务】
请你根据上述核心项目需求和提供的模板，生成以下初始文档：
1. **项目顶层任务文件：** `/docs/tasks/calc-library-root.md` (使用 task-tmpl.md)
2. **PRD 文档：** `/docs/prd.md` (使用 prd-tmpl.md)
3. **架构文档：** `/docs/architecture.md` (使用 architecture-tmpl.md)

【模板文件路径】
@/docs/templates/task-tmpl.md
@/docs/templates/prd-tmpl.md
@/docs/templates/architecture-tmpl.md

【生成规则】
- 在 `calc-library-root.md` 的“任务 TODO List”中，请包含：
    - 生成 PRD 文档的 TODO 项。
    - 生成架构文档的 TODO 项。
    - 明确列出**需要进一步分解为独立子任务**的主要功能模块（如：实现加法功能、实现减法功能等），并在其后注明。
    - 明确列出其他独立的工作项（如：配置CMake构建系统，编写README）。
- 在生成 PRD 和架构文档时，请根据核心项目需求填充内容。
- 仅生成文档，不编写代码。


---
【偏差数据】
无

### 1.1 子任务生成
USE>>> 你是一个专业的C语言开发者，请根据以下核心项目需求、PRD、架构文档以及指定的父任务TODO项，为“实现加法功能模块”创建一个独立的子任务文件。

【核心项目需求】
我需要一个C语言的计算器库，支持整数和浮点数的加、减、乘、除运算。
除法运算需要考虑除零错误。
这个库需要提供统一的API接口。
所有运算函数都需要有单元测试。
项目构建工具使用CMake。
源代码和头文件应按模块组织，并生成静态库。
项目需要有一个README说明如何使用和构建。

【父任务及待分解的TODO项】
父任务文件：@/docs/tasks/calc-library-root.md
待分解的TODO项：
- [ ] 实现加法功能模块 (需要分解为独立子任务)


【参考文档】
PRD 文档：@/docs/prd.md
架构文档：@/docs/architecture.md

【任务】
请生成以下子任务文件：`/docs/tasks/subtasks/feature-add.md` (使用 task-tmpl.md)

【生成规则】
- 在 `feature-add.md` 的“任务 TODO List”中，请将“实现加法功能模块”分解为**原子级别的可执行步骤**。这些步骤应该具体到文件操作和功能实现。
- TODO 项应包括：定义函数原型、实现函数逻辑（考虑整数和浮点数）、编写单元测试用例、以及必要的CMake文件更新。
- 在“父任务”部分，请引用 `/docs/tasks/calc-library-root.md`。
- 仅生成文档，不编写代码。

【模板文件路径】
@/docs/templates/task-tmpl.md


### 2、代码生成 + 自动化迭代
USER>>> 你是一个专业的C语言开发者。

请根据以下核心项目需求、PRD、架构文档以及指定的子任务文件，生成实现代码和单元测试代码。

【核心项目需求】
我需要一个C语言的计算器库，支持整数和浮点数的加、减、乘、除运算。
除法运算需要考虑除零错误。
这个库需要提供统一的API接口。
所有运算函数都需要有单元测试。
项目构建工具使用CMake。
源代码和头文件应按模块组织，并生成静态库。
项目需要有一个README说明如何使用和构建。

【当前执行的任务文件】
@/docs/tasks/subtasks/feature-add.md

【参考文档】
PRD 文档：@/docs/prd.md
架构文档：@/docs/architecture.md

【规范】
- 严格遵循 `feature-add.md` 中“任务 TODO List”列出的原子步骤进行代码生成。
- 先写测试用例，再写功能实现。
- 使用 assert 作为测试框架。
- 路径结构为：src/ 与 tests/。
- 不使用 catch2、CUnit 等其他框架。
- 生成 Makefile 和 CMakeLists.txt，支持 `make test` 和 `cmake --build .` 执行测试。

【头文件包含规范】
所有模块头文件应放在 `include/` 目录下。在源文件中，使用如下方式包含头文件：
```c
#include "xxx.h"


【偏差数据】
无

### 4、验证入库/回滚
已验证。

【测试报告】
make test通过。
无偏差。
可提交。

## Enhancement 1 - [Build]change to cmake

### 0、模板准备
无

### 1、文档生成
无

### 2、代码生成 + 自动化迭代
USER>>> 你是一个 C 语言开发者，请把当前 make 构建项目修改为 cmake 工程

【需求】
- cmake项目名为 funcagent
- src生成静态库，库名 funcagent
- test生成可执行文件
- 同时保留 make 构建

【规范】
- cmake版本最小版本3.20


【任务拆分】
- 先分析当前 make 构建，了解 源码，头文件，库目录，依赖库，构建目标等信息
- 创建顶层 CMakeLists.txt
- 创建 src/CMakeLists.txt
- 创建 test/CMakeLists.txt
- cmake构建 并测试


### 3、偏差分析与优化
无

### 4、验证入库/回滚
【测试报告】
验证通过。

USER>>> 本次修改变更 更新到 CHANGELOG.md

【要求】
当前版本始终保持 0.1.x
最新修改保持再顶部

格式：
```markdown
# Func Agent Changelog

### [版本] - 日期
- 一句话简短描述当前任务
```

## Enhancement 2 - [Feature] add support float

